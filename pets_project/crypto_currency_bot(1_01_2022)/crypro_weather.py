import json
import requests
import random
import datetime


def get_weather(city):
    print(city)

    open_weather_token = "*****************"
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Raine": "–î–æ–∂–¥—å: \U00002614",
        "Drizzle": "–î–æ–∂–¥—å: \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞: \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric"
        )
        data = r.json()
        # command = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–õ—É—á—à–µ —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–∞–º)"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        text = ""
        text += (  # f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}¬∞–° {wd}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind}\n"
            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
            f"–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å —Ç–æ–±–æ–π - –ø–æ–≥–æ–¥–∞, –Ω–µ —Ä–µ—à–∞–µ—Ç!")
        return text

    except:
        return {
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',
            # 'body': json.dumps('Hello from Lambda Sir!')
        }


TELE_TOKEN = "*****************:*****************-*****************"
URL = "https://api.telegram.org/bot{}/".format(TELE_TOKEN)


def get_data():
    url = 'https://api-pub.bitfinex.com/v2/tickers?symbols=tBTCUSD,tETHUSD,tETCUSD,tDOGE:USD,tSUSHI:USD,tDOTUSD,tVETUSD,tXRPUSD,tADAUSD'
    r = requests.get(url)
    r = r.json()
    text = ""
    for i in r:
        if i[6] * 100 >= 0:
            text += (f"üü¢{i[0][1:4]} | ${round(i[1], 2)} | {(round(i[6] * 100, 2))}%\n")
        else:
            text += (f"üî¥{i[0][1:4]} | ${round(i[1], 2)} | {(round(i[6] * 100, 2))}%\n")
    return text


def send_message(text, chat_id):
    final_text = text
    url = URL + "sendMessage?text={}&chat_id={}&parse_mode=HTML".format(final_text, chat_id)
    requests.get(url)


def lambda_handler(event, context):
    print(event['body'])
    # TODO implement
    message = json.loads(event['body'])

    try:

        chat_id = message['message']['chat']['id']
        command = message['message']['text']
        user_name = message['message']['chat']["first_name"]
        duble_text = ["–ñ—Ä–µ–±–∏–π –±—Ä–æ—à–µ–Ω",
                      "–ù–∏ –¥–Ω—è –±–µ–∑ —à—Ç—Ä–∏—Ö–∞, –Ω–∏ –¥–Ω—è –±–µ–∑ —Å—Ç—Ä–æ—á–∫–∏",
                      "–ù–∏—á–µ–≥–æ —É–∂–µ –Ω–µ –≥–æ–≤–æ—Ä—è—Ç —Ç–∞–∫–æ–≥–æ, —á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω—å—à–µ",
                      "–ù–∏–∫–∞–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç—Å—è –±–µ–∑ —Ä–∏—Å–∫–∞",
                      "–û –≤—Ä–µ–º–µ–Ω–∞, –æ –Ω—Ä–∞–≤—ã!",
                      "–†–∞–≤–Ω–æ–µ —Ä–∞–≤–Ω–æ–º—É –≤–æ–∑–¥–∞–µ—Ç—Å—è",
                      "–ù–∞—á–∞–ªo ‚Äî –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—Å–µ–≥–æ", "–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π, —Å—Ç–æ–ª—å–∫–æ –º–Ω–µ–Ω–∏–π", "–î–ª—è –ø–æ–Ω–∏–º–∞—é—â–µ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"]

        if command == "/price":
            text = str(get_data())
        elif command == "/start":
            text = f"–ü—Ä–∏–≤–µ—Ç {user_name} —Ç–µ–ø–µ—Ä—å –≤—Å–µ –º–µ—Ç–∞-–¥–∞–Ω—ã–µ —É –Ω–∞—Å) –Ω–∞–∂–º–∏ –º–µ–Ω—é —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"



        elif "/weather" in command:
            city = []
            for i in command.split():
                city.append(i)
            print(city)
            text = str(get_weather(city[1]))



        else:
            text = "Problem with command"
        send_message(text, chat_id)
        # send_message(str(random.choice(duble_text)), chat_id)
        return {
            'statusCode': 200,
            # 'body': json.dumps('Hello from Lambda Sir!')
        }

    except:
        return {
            'statusCode': 200,
            # 'body': json.dumps('Hello from Lambda Sir!')
        }
